// <auto-generated />
using System;
using Everflow.Cep.Infrastructure.Persistence.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Everflow.Cep.Infrastructure.Persistence.EfCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240624205425_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Everflow.Cep.Core.Events.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = 1,
                            Description = "Event One description",
                            EndDateTime = new DateTime(2024, 6, 22, 20, 54, 25, 336, DateTimeKind.Utc).AddTicks(7915),
                            Name = "Event One",
                            StartDateTime = new DateTime(2024, 6, 21, 20, 54, 25, 336, DateTimeKind.Utc).AddTicks(7844),
                            Status = "Finished"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = 1,
                            Description = "Event Two description",
                            EndDateTime = new DateTime(2024, 6, 25, 6, 54, 25, 336, DateTimeKind.Utc).AddTicks(7919),
                            Name = "Event Two",
                            StartDateTime = new DateTime(2024, 6, 24, 10, 54, 25, 336, DateTimeKind.Utc).AddTicks(7918),
                            Status = "CloseToInvitation"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = 1,
                            Description = "Event Three description",
                            EndDateTime = new DateTime(2024, 6, 24, 22, 54, 25, 336, DateTimeKind.Utc).AddTicks(7921),
                            Name = "Event Three",
                            StartDateTime = new DateTime(2024, 6, 24, 15, 54, 25, 336, DateTimeKind.Utc).AddTicks(7920),
                            Status = "OpenToInvitation"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserId = 1,
                            Description = "Event Four description",
                            EndDateTime = new DateTime(2024, 6, 25, 1, 54, 25, 336, DateTimeKind.Utc).AddTicks(7922),
                            Name = "Event Four",
                            StartDateTime = new DateTime(2024, 6, 24, 21, 54, 25, 336, DateTimeKind.Utc).AddTicks(7922),
                            Status = "Draft"
                        });
                });

            modelBuilder.Entity("Everflow.Cep.Core.Invitations.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvitedToEventId")
                        .HasColumnType("int");

                    b.Property<int>("InvitedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvitedToEventId");

                    b.HasIndex("InvitedUserId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Everflow.Cep.Core.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user1@example.com",
                            Name = "User One",
                            Password = "P@ssword1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@example.com",
                            Name = "User Two",
                            Password = "P@ssword2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user3@example.com",
                            Name = "User Three",
                            Password = "P@ssword3"
                        });
                });

            modelBuilder.Entity("Everflow.Cep.Core.Events.Event", b =>
                {
                    b.HasOne("Everflow.Cep.Core.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Everflow.Cep.Core.Invitations.Invitation", b =>
                {
                    b.HasOne("Everflow.Cep.Core.Events.Event", "InvitedToEvent")
                        .WithMany()
                        .HasForeignKey("InvitedToEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Everflow.Cep.Core.Users.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InvitedToEvent");

                    b.Navigation("InvitedUser");
                });
#pragma warning restore 612, 618
        }
    }
}
